#+title: QTile Config
#+PROPERTY: header-args :tangle yes

* Main
#+begin_src python :tangle config.py
from modules.keys import keys, mod
from modules.groups import groups
from modules.layouts import layouts, floating_layout
from modules.mouse import mouse
from modules.hooks import *
import os
from modules.screens import screens
dgroups_key_binder = None
dgroups_app_rules = []  # type: List
main = None  # WARNING: this is deprecated and will be removed soon
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
auto_fullscreen = True
focus_on_window_activation = "smart"
wmname = "Qtile"
widget_defaults = dict(
        font='Cascadia Code',
        fontsize=13,
        padding=12
    )
#+end_src
* Functional
** Keybindings
*** Variables
#+begin_src python :tangle modules/keys.py
from libqtile.lazy import lazy
from libqtile.config import KeyChord, Key

home = "/home/jomor"
mod = "mod4"
terminal = "kitty"
flameshot = f"{home}/flameshot.sh"
emacs = "emacsclient -c -a 'emacs'"
#emacse = "emacsclient --eval '(emacs-everywhere)'"
emacsclient = f"{home}/.nix-profile/bin/emacs --daemon"
#agenda = "emacsclient -c '/home/moore/org/20230619122239-agenda.org'"
#grabcolor = "grabc | xclip -sel clip"

keys = [
   #+end_src
*** Applications
    #+begin_src python :tangle modules/keys.py
    #Rofi
    Key(["mod1"], "space", lazy.spawn("rofi -show combi"), desc="spawn rofi"),
    Key([mod], "p", lazy.spawn("rofi-pass"), desc="spawn rofi-pass"),
    Key([mod], "c", lazy.spawn("rofi -show calc"), desc="spawn rofi-calc"),

    KeyChord(["control"], "space", [
    Key([], "b", lazy.spawn(f"rofi -show file-browser-extended -file-browser-dir {home}/3D/Blender")),
    Key([], "h", lazy.spawn(f"rofi -show file-browser-extended -file-browser-dir {home}/3D/Houdini")),
    Key([], "p", lazy.spawn(f"rofi -show file-browser-extended -file-browser-dir {home}/Pictures")),
    ]),
    #Terminal
    Key([mod, "mod1"], "Return", lazy.spawn(terminal), desc="Launch terminal window"),
    #Emacs
    Key([mod], "e", lazy.spawn(emacs), desc="launch emacs"),
    #Key([mod,"mod1"], "e", lazy.spawn(emacse), desc="launch emacs everywhere"),
    Key(["control", "mod1"], "e", lazy.spawn(emacsclient), desc="launch emacsclient"),
    #File mangers
    Key([mod, "mod1"], "f", lazy.spawn('thunar'), desc="launch GUI file manager"),
    Key([mod, "shift"], "f", lazy.spawn([terminal, "-e", "ranger"]), desc="launch term file manager"),
    #Web Browsers
    Key([mod], "b", lazy.spawn('firefox'), desc="launch web browser"),
    Key([mod, "mod1"], "b", lazy.spawn('qutebrowser'), desc="launch alt web browser"),
    #Utility
    Key([mod], "s", lazy.spawn(flameshot), desc="draw screenshot"),

    Key([mod], "g", lazy.spawn('kcolorchooser'), desc="color chooser"),
    #Misc
    Key([mod], "d", lazy.spawn('discord'), desc="launch discord"),
    Key([mod], "m", lazy.spawn('spotify'), desc="launch spotify"),
    #+end_src
*** Windows
   #+begin_src python :tangle modules/keys.py
    # Switch between windows
    Key([mod], "h", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "l", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "j", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "k", lazy.layout.up(), desc="Move focus up"),
    Key([mod], "space", lazy.layout.next(), desc="Move window focus to other window"),
    # Move windows between left/right columns or move up/down in current stack.
    # Moving out of range in Columns layout will create new column.
    Key([mod, "shift"], "h", lazy.layout.shuffle_left(), desc="Move window to the left"),
    Key([mod, "shift"], "l", lazy.layout.shuffle_right(), desc="Move window to the right"),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move window up"),
    # Grow windows. If current window is on the edge of screen and direction
    # will be to screen edge - window would shrink.
    Key([mod, "control"], "h", lazy.layout.grow(), desc="Grow window"),
    Key([mod, "control"], "l", lazy.layout.shrink(), desc="Shrink window"),
    Key([mod, "mod1"], "n", lazy.layout.normalize(), desc="Reset all window sizes"),
    # Toggle between split and unsplit sides of stack.
    # Split = all windows displayed
    # Unsplit = 1 window displayed, like Max layout, but still with
    # multiple stack panes
    Key([mod, "shift"], "Return", lazy.layout.toggle_split(), desc="Toggle between split and unsplit sides of stack"),
   #+end_src
*** Layouts

#+begin_src python :tangle modules/keys.py
    # Toggle between different layouts as defined below
    Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),

    Key([mod], "q", lazy.window.kill(), desc="Kill focused window"),
    Key([mod, "shift", "control"], "h", lazy.layout.swap_column_left()),
    Key([mod, "shift", "control"], "l", lazy.layout.swap_column_right()),
    Key([mod, "shift"], "space", lazy.layout.flip()),
    Key([mod, "control"], "r", lazy.restart(), desc="Restart Qtile"),
    Key([mod, "control"], "q", lazy.shutdown(), desc="Shutdown Qtile"),
    Key([mod, "shift"],
        "r",
        lazy.spawncmd(),
        desc="Spawn a command using a prompt widget"),
    Key([], "XF86AudioRaiseVolume",lazy.spawn("amixer set Master 3%+")),
    Key([], "XF86AudioLowerVolume",lazy.spawn("amixer set Master 3%-")),
    Key([], "XF86AudioMute",lazy.spawn("amixer set Master toggle")),
    Key([], "XF86AudioPlay",lazy.spawn("playerctl play-pause")),
    Key([], "XF86AudioNext",lazy.spawn("playerctl next")),
    Key([], "XF86AudioPrev",lazy.spawn("playerctl previous")),
]
#+end_src
*** Groups
#+begin_src python :tangle modules/groups.py
from libqtile.config import Key, Group, ScratchPad, DropDown
from libqtile.command import lazy
from .keys import keys, mod
group_names = ["1","2","3","4","5"]
groups = []

for i in range (len(group_names)):
    groups.append(Group(name = group_names[i]))

for i in groups:
    keys.extend([
        # mod1 + letter of group = switch to group
        Key([mod], i.name, lazy.group[i.name].toscreen(), desc="Switch to group {}".format(i.name)),

        Key([mod, "mod1"], "l", lazy.screen.next_group(), desc="Switch to next group"),
        Key([mod, "mod1"], "h", lazy.screen.prev_group(), desc="Switch to previous group"),

        # mod1 + shift + letter of group = switch to & move focused window to group
        Key([mod, "shift"], i.name, lazy.window.togroup(i.name, switch_group=True),
            desc="Switch to & move focused window to group {}".format(i.name)),
        # Or, use below if you prefer not to switch to that group.
        # # mod1 + shift + letter of group = move focused window to group
        # Key([mod, "shift"], i.name, lazy.window.togroup(i.name),
        #     desc="move focused window to group {}".format(i.name)),
    ])
#+end_src
*** ScratchPads
#+begin_src python :tangle modules/groups.py
groups.append(ScratchPad("scratchpad",[

    DropDown("termup", "kitty", opacity = 0.85,),

    DropDown("term", "kitty",
        height = 0.9, width = 0.6, x = 0.2, y = 0, opacity = 0.95, warp_pointer = True,),

    DropDown("email", "/usr/bin/thunderbird",
        height = 0.8, width = 0.8, x = 0.1, y = 0.1, opacity = 0.95, warp_pointer = True,),

    DropDown("files", "kitty -e ranger",
        height = 0.8, width = 0.8, x = 0.1, y = 0.1, opacity = 0.95, warp_pointer = True,),

    DropDown("audio", "pavucontrol",
        height = 0.45, width = 0.4, x = 0.3, y = 0.1, opacity = 0.95, warp_pointer = True,)
        ]))

keys.extend([
        Key([mod], "Return", lazy.group['scratchpad'].dropdown_toggle('term')),
        Key([mod, "shift"], "Return", lazy.group['scratchpad'].dropdown_toggle('termup')),
        Key([mod], "f", lazy.group['scratchpad'].dropdown_toggle('files')),
        Key([mod], "t", lazy.group['scratchpad'].dropdown_toggle('email')),
        Key([mod], "a", lazy.group['scratchpad'].dropdown_toggle('audio')),
        ])
#+end_src
** Mouse
#+begin_src python :tangle modules/mouse.py
from libqtile.config import Click, Drag
from libqtile.lazy import lazy
from .keys import mod

# Drag floating layouts.
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(),
         start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(),
         start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front())
]
#+end_src
* Visual
** Screens
#+begin_src python :tangle modules/screens.py
from libqtile import bar
from .widgets import *
from libqtile.config import Screen
from modules.keys import terminal
import os

bcolor = "#2f343f"
backcolor = "#00000050"
#"#00000050"
screens = [
    Screen(
        top=bar.Bar(
            [   widget.Sep(padding=3, linewidth=0, background= bcolor),
                widget.Image(filename='~/.config/qtile/nix.png', margin=3, background= bcolor, mouse_callbacks={'Button1': lambda: qtile.cmd_spawn("rofi -show combi")}),
                widget.Sep(padding=4, linewidth=0, background= bcolor),
                widget.GroupBox(
                                highlight_method='line',
                                this_screen_border="#5294e2",
                                this_current_screen_border="#5294e2",
                                active="#ffffff",
                                inactive="#848e96",
                                background= bcolor),
                widget.TextBox(
                       text = 'î‚°',
                       padding = 0,
                       fontsize = 28,
                       foreground= bcolor
                       ),
                widget.Prompt(),
                widget.Spacer(length=5),
                widget.WindowName(foreground='#99c0de',fmt='{}'),
                widget.Chord(
                    chords_colors={
                        'launch': ("#ff0000", "#ffffff"),
                    },
                    name_transform=lambda name: name.upper(),
                ),
                widget.CurrentLayoutIcon(scale=0.75),
                widget.CheckUpdates(
                    update_interval=1800,
                    distro="Arch_yay",
                    display_format="{updates} Updates",
                    foreground="#ffffff",
                    mouse_callbacks={
                        'Button1':
                        lambda: qtile.cmd_spawn(terminal + ' -e yay -Syu')
                    },
                    background= bcolor),
                widget.Systray(icon_size = 20),
                widget.TextBox(
                       text = 'î‚²',
                       padding = 0,
                       fontsize = 28,
                       foreground= bcolor
                       ),
                volume,
                widget.TextBox(
                       text = 'îƒ’',
                       padding = 0,
                       fontsize = 28,
                       foreground= bcolor,
                       ),
                widget.TextBox(
                       text = 'î‚²',
                       padding = 0,
                       fontsize = 28,
                       foreground= bcolor
                       ),
                widget.Clock(format='%Y-%m-%d %a',
                             background= bcolor,
                             foreground='#9bd689'),
                widget.Clock(format='ó°¥” %I:%M %p',
                             background= bcolor,
                             foreground='#ffffff'),
                                                widget.TextBox(

                       text = 'îƒ’',
                       padding = 0,
                       fontsize = 28,
                       foreground='#2f343f',
                       ),
                widget.TextBox(
                    text='ï€‘',
                    mouse_callbacks= {
                        'Button1':
                        lambda: qtile.cmd_spawn(os.path.expanduser('~/.dotfiles/bin/powermenu.sh'))
                    },
                    foreground='#e39378'
                )

            ],
            30,  # height in px
            background= backcolor  # background color
        ), ),
]
#+end_src
** Widgets
#+begin_src python :tangle modules/widgets.py
from libqtile import widget
from libqtile import qtile
colors = [
	      ["#282c34", "#282c34"], # panel background
          ["#3d3f4b", "#434758"], # background for current screen tab
          ["#ffffff", "#ffffff"], # font color for group names
          ["#ff5555", "#ff5555"], # border line color for current tab
          ["#74438f", "#74438f"], # border line color for 'other tabs' and color for 'odd widgets'
          ["#4f76c7", "#4f76c7"], # color for the 'even widgets'
          ["#e1acff", "#e1acff"], # window name
          ["#ecbbfb", "#ecbbfb"]  # background for inactive screens
]

widget_defaults = dict(
    font='Cantarell',
    fontsize=12,
    padding=3,
)


extension_defaults = widget_defaults.copy()
class MyVolume(widget.Volume):
    def _configure(self, qtile, bar):
        widget.Volume._configure(self, qtile, bar)
        self.volume = self.get_volume()
        if self.volume <= 0:
            self.text = 'ó°†ª'
        elif self.volume <= 15:
            self.text = 'ï€¦'
        elif self.volume < 50:
            self.text = 'ï€§'
        else:
            self.text = 'ï€¨'
        # drawing here crashes Wayland

    def _update_drawer(self, wob=False):
        if self.volume <= 0:
            self.text = 'ó°†ª'
        elif self.volume <= 15:
            self.text = 'ï€¦'
        elif self.volume < 50:
            self.text = 'ï€§'
        else:
            self.text = 'ï€¨'
        self.draw()

        if wob:
            with open(self.wob, 'a') as f:
                f.write(str(self.volume) + "\n")

volume = MyVolume(
    fontsize=18,
    font='Font Awesome 5 Free',
    foreground=colors[6],
    background='#2f343f',
    mouse_callbacks = {'Button1': lambda: qtile.cmd_spawn("pavucontrol")}
)

#+end_src
** Layouts
#+begin_src python :tangle modules/layouts.py
from libqtile import layout
from libqtile.config import Match

layout_theme = {"border_width": 2,
                "margin": 8,
                "border_focus": "e1acff",
                "border_normal": "1D2330"
                }

layouts = [
    layout.MonadTall(margin=8, border_focus='#5294e2',
                     border_normal='#2c5380'),
    #layout.Columns(border_focus_stack='#d75f5f'),
    layout.Max(),
    # Try more layouts by unleashing below layouts.
    # layout.Stack(num_stacks=2),
    # layout.Bsp(),
    # layout.Matrix(),

    # layout.MonadTall(),
    # layout.MonadWide(),
    # layout.RatioTile(),
    # layout.Tile(),
    # layout.TreeTab(),
    # layout.VerticalTile(),
    # layout.Zoomy(),
]

floating_layout = layout.Floating(
    border_width = 0,
    float_rules=[
    # Run the utility of `xprop` to see the wm class and name of an X client.
    *layout.Floating.default_float_rules,
    Match(wm_class='confirmreset'),  # gitk
    Match(wm_class='makebranch'),  # gitk
    Match(wm_class='maketag'),  # gitk
    Match(wm_class='ssh-askpass'),  # ssh-askpass
    Match(title='branchdialog'),  # gitk
    Match(title='pinentry'),  # GPG key password entry
    Match(title='gpg2'),  # GPG key password entry?
    Match(title='PureRef'),  # reference
    Match(title='Volume Control'),  # audio
])
#+end_src
